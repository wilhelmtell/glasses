#ifndef GLS_KEYDOWN_EVENT_DISPATCH_HH_
#define GLS_KEYDOWN_EVENT_DISPATCH_HH_

#include <boost/signals2.hpp>
#include "repeat_keydown_event_dispatch.hh"
#include "nonrepeat_keydown_event_dispatch.hh"

namespace gls {
template <typename Op>
using signal = boost::signals2::signal<Op>;
using connection = boost::signals2::connection;

struct keydown_event_dispatch {
  using unknown_signal_t = signal<void()>;
  using unknown_slot_t = unknown_signal_t::slot_type;
  using backspace_signal_t = signal<void()>;
  using backspace_slot_t = backspace_signal_t::slot_type;
  using tab_signal_t = signal<void()>;
  using tab_slot_t = tab_signal_t::slot_type;
  using returnkey_signal_t = signal<void()>;
  using returnkey_slot_t = returnkey_signal_t::slot_type;
  using escape_signal_t = signal<void()>;
  using escape_slot_t = escape_signal_t::slot_type;
  using space_signal_t = signal<void()>;
  using space_slot_t = space_signal_t::slot_type;
  using exclaim_signal_t = signal<void()>;
  using exclaim_slot_t = exclaim_signal_t::slot_type;
  using quotedbl_signal_t = signal<void()>;
  using quotedbl_slot_t = quotedbl_signal_t::slot_type;
  using hash_signal_t = signal<void()>;
  using hash_slot_t = hash_signal_t::slot_type;
  using dollar_signal_t = signal<void()>;
  using dollar_slot_t = dollar_signal_t::slot_type;
  using percent_signal_t = signal<void()>;
  using percent_slot_t = percent_signal_t::slot_type;
  using ampersand_signal_t = signal<void()>;
  using ampersand_slot_t = ampersand_signal_t::slot_type;
  using quote_signal_t = signal<void()>;
  using quote_slot_t = quote_signal_t::slot_type;
  using leftparen_signal_t = signal<void()>;
  using leftparen_slot_t = leftparen_signal_t::slot_type;
  using rightparen_signal_t = signal<void()>;
  using rightparen_slot_t = rightparen_signal_t::slot_type;
  using asterisk_signal_t = signal<void()>;
  using asterisk_slot_t = asterisk_signal_t::slot_type;
  using plus_signal_t = signal<void()>;
  using plus_slot_t = plus_signal_t::slot_type;
  using comma_signal_t = signal<void()>;
  using comma_slot_t = comma_signal_t::slot_type;
  using minus_signal_t = signal<void()>;
  using minus_slot_t = minus_signal_t::slot_type;
  using period_signal_t = signal<void()>;
  using period_slot_t = period_signal_t::slot_type;
  using slash_signal_t = signal<void()>;
  using slash_slot_t = slash_signal_t::slot_type;
  using zero_signal_t = signal<void()>;
  using zero_slot_t = zero_signal_t::slot_type;
  using one_signal_t = signal<void()>;
  using one_slot_t = one_signal_t::slot_type;
  using two_signal_t = signal<void()>;
  using two_slot_t = two_signal_t::slot_type;
  using three_signal_t = signal<void()>;
  using three_slot_t = three_signal_t::slot_type;
  using four_signal_t = signal<void()>;
  using four_slot_t = four_signal_t::slot_type;
  using five_signal_t = signal<void()>;
  using five_slot_t = five_signal_t::slot_type;
  using six_signal_t = signal<void()>;
  using six_slot_t = six_signal_t::slot_type;
  using seven_signal_t = signal<void()>;
  using seven_slot_t = seven_signal_t::slot_type;
  using eight_signal_t = signal<void()>;
  using eight_slot_t = eight_signal_t::slot_type;
  using nine_signal_t = signal<void()>;
  using nine_slot_t = nine_signal_t::slot_type;
  using colon_signal_t = signal<void()>;
  using colon_slot_t = colon_signal_t::slot_type;
  using semicolon_signal_t = signal<void()>;
  using semicolon_slot_t = semicolon_signal_t::slot_type;
  using less_signal_t = signal<void()>;
  using less_slot_t = less_signal_t::slot_type;
  using equals_signal_t = signal<void()>;
  using equals_slot_t = equals_signal_t::slot_type;
  using greater_signal_t = signal<void()>;
  using greater_slot_t = greater_signal_t::slot_type;
  using question_signal_t = signal<void()>;
  using question_slot_t = question_signal_t::slot_type;
  using at_signal_t = signal<void()>;
  using at_slot_t = at_signal_t::slot_type;
  using leftbracket_signal_t = signal<void()>;
  using leftbracket_slot_t = leftbracket_signal_t::slot_type;
  using backslash_signal_t = signal<void()>;
  using backslash_slot_t = backslash_signal_t::slot_type;
  using rightbracket_signal_t = signal<void()>;
  using rightbracket_slot_t = rightbracket_signal_t::slot_type;
  using caret_signal_t = signal<void()>;
  using caret_slot_t = caret_signal_t::slot_type;
  using underscore_signal_t = signal<void()>;
  using underscore_slot_t = underscore_signal_t::slot_type;
  using backquote_signal_t = signal<void()>;
  using backquote_slot_t = backquote_signal_t::slot_type;
  using a_signal_t = signal<void()>;
  using a_slot_t = a_signal_t::slot_type;
  using b_signal_t = signal<void()>;
  using b_slot_t = b_signal_t::slot_type;
  using c_signal_t = signal<void()>;
  using c_slot_t = c_signal_t::slot_type;
  using d_signal_t = signal<void()>;
  using d_slot_t = d_signal_t::slot_type;
  using e_signal_t = signal<void()>;
  using e_slot_t = e_signal_t::slot_type;
  using f_signal_t = signal<void()>;
  using f_slot_t = f_signal_t::slot_type;
  using g_signal_t = signal<void()>;
  using g_slot_t = g_signal_t::slot_type;
  using h_signal_t = signal<void()>;
  using h_slot_t = h_signal_t::slot_type;
  using i_signal_t = signal<void()>;
  using i_slot_t = i_signal_t::slot_type;
  using j_signal_t = signal<void()>;
  using j_slot_t = j_signal_t::slot_type;
  using k_signal_t = signal<void()>;
  using k_slot_t = k_signal_t::slot_type;
  using l_signal_t = signal<void()>;
  using l_slot_t = l_signal_t::slot_type;
  using m_signal_t = signal<void()>;
  using m_slot_t = m_signal_t::slot_type;
  using n_signal_t = signal<void()>;
  using n_slot_t = n_signal_t::slot_type;
  using o_signal_t = signal<void()>;
  using o_slot_t = o_signal_t::slot_type;
  using p_signal_t = signal<void()>;
  using p_slot_t = p_signal_t::slot_type;
  using q_signal_t = signal<void()>;
  using q_slot_t = q_signal_t::slot_type;
  using r_signal_t = signal<void()>;
  using r_slot_t = r_signal_t::slot_type;
  using s_signal_t = signal<void()>;
  using s_slot_t = s_signal_t::slot_type;
  using t_signal_t = signal<void()>;
  using t_slot_t = t_signal_t::slot_type;
  using u_signal_t = signal<void()>;
  using u_slot_t = u_signal_t::slot_type;
  using v_signal_t = signal<void()>;
  using v_slot_t = v_signal_t::slot_type;
  using w_signal_t = signal<void()>;
  using w_slot_t = w_signal_t::slot_type;
  using x_signal_t = signal<void()>;
  using x_slot_t = x_signal_t::slot_type;
  using y_signal_t = signal<void()>;
  using y_slot_t = y_signal_t::slot_type;
  using z_signal_t = signal<void()>;
  using z_slot_t = z_signal_t::slot_type;
  using deletekey_signal_t = signal<void()>;
  using deletekey_slot_t = deletekey_signal_t::slot_type;
  using capslock_signal_t = signal<void()>;
  using capslock_slot_t = capslock_signal_t::slot_type;
  using f1_signal_t = signal<void()>;
  using f1_slot_t = f1_signal_t::slot_type;
  using f2_signal_t = signal<void()>;
  using f2_slot_t = f2_signal_t::slot_type;
  using f3_signal_t = signal<void()>;
  using f3_slot_t = f3_signal_t::slot_type;
  using f4_signal_t = signal<void()>;
  using f4_slot_t = f4_signal_t::slot_type;
  using f5_signal_t = signal<void()>;
  using f5_slot_t = f5_signal_t::slot_type;
  using f6_signal_t = signal<void()>;
  using f6_slot_t = f6_signal_t::slot_type;
  using f7_signal_t = signal<void()>;
  using f7_slot_t = f7_signal_t::slot_type;
  using f8_signal_t = signal<void()>;
  using f8_slot_t = f8_signal_t::slot_type;
  using f9_signal_t = signal<void()>;
  using f9_slot_t = f9_signal_t::slot_type;
  using f10_signal_t = signal<void()>;
  using f10_slot_t = f10_signal_t::slot_type;
  using f11_signal_t = signal<void()>;
  using f11_slot_t = f11_signal_t::slot_type;
  using f12_signal_t = signal<void()>;
  using f12_slot_t = f12_signal_t::slot_type;
  using printscreen_signal_t = signal<void()>;
  using printscreen_slot_t = printscreen_signal_t::slot_type;
  using scrolllock_signal_t = signal<void()>;
  using scrolllock_slot_t = scrolllock_signal_t::slot_type;
  using pause_signal_t = signal<void()>;
  using pause_slot_t = pause_signal_t::slot_type;
  using insert_signal_t = signal<void()>;
  using insert_slot_t = insert_signal_t::slot_type;
  using home_signal_t = signal<void()>;
  using home_slot_t = home_signal_t::slot_type;
  using pageup_signal_t = signal<void()>;
  using pageup_slot_t = pageup_signal_t::slot_type;
  using end_signal_t = signal<void()>;
  using end_slot_t = end_signal_t::slot_type;
  using pagedown_signal_t = signal<void()>;
  using pagedown_slot_t = pagedown_signal_t::slot_type;
  using right_signal_t = signal<void()>;
  using right_slot_t = right_signal_t::slot_type;
  using left_signal_t = signal<void()>;
  using left_slot_t = left_signal_t::slot_type;
  using down_signal_t = signal<void()>;
  using down_slot_t = down_signal_t::slot_type;
  using up_signal_t = signal<void()>;
  using up_slot_t = up_signal_t::slot_type;
  using numlockclear_signal_t = signal<void()>;
  using numlockclear_slot_t = numlockclear_signal_t::slot_type;
  using kp_divide_signal_t = signal<void()>;
  using kp_divide_slot_t = kp_divide_signal_t::slot_type;
  using kp_multiply_signal_t = signal<void()>;
  using kp_multiply_slot_t = kp_multiply_signal_t::slot_type;
  using kp_minus_signal_t = signal<void()>;
  using kp_minus_slot_t = kp_minus_signal_t::slot_type;
  using kp_plus_signal_t = signal<void()>;
  using kp_plus_slot_t = kp_plus_signal_t::slot_type;
  using kp_enter_signal_t = signal<void()>;
  using kp_enter_slot_t = kp_enter_signal_t::slot_type;
  using kp_1_signal_t = signal<void()>;
  using kp_1_slot_t = kp_1_signal_t::slot_type;
  using kp_2_signal_t = signal<void()>;
  using kp_2_slot_t = kp_2_signal_t::slot_type;
  using kp_3_signal_t = signal<void()>;
  using kp_3_slot_t = kp_3_signal_t::slot_type;
  using kp_4_signal_t = signal<void()>;
  using kp_4_slot_t = kp_4_signal_t::slot_type;
  using kp_5_signal_t = signal<void()>;
  using kp_5_slot_t = kp_5_signal_t::slot_type;
  using kp_6_signal_t = signal<void()>;
  using kp_6_slot_t = kp_6_signal_t::slot_type;
  using kp_7_signal_t = signal<void()>;
  using kp_7_slot_t = kp_7_signal_t::slot_type;
  using kp_8_signal_t = signal<void()>;
  using kp_8_slot_t = kp_8_signal_t::slot_type;
  using kp_9_signal_t = signal<void()>;
  using kp_9_slot_t = kp_9_signal_t::slot_type;
  using kp_0_signal_t = signal<void()>;
  using kp_0_slot_t = kp_0_signal_t::slot_type;
  using kp_period_signal_t = signal<void()>;
  using kp_period_slot_t = kp_period_signal_t::slot_type;
  using application_signal_t = signal<void()>;
  using application_slot_t = application_signal_t::slot_type;
  using power_signal_t = signal<void()>;
  using power_slot_t = power_signal_t::slot_type;
  using kp_equals_signal_t = signal<void()>;
  using kp_equals_slot_t = kp_equals_signal_t::slot_type;
  using f13_signal_t = signal<void()>;
  using f13_slot_t = f13_signal_t::slot_type;
  using f14_signal_t = signal<void()>;
  using f14_slot_t = f14_signal_t::slot_type;
  using f15_signal_t = signal<void()>;
  using f15_slot_t = f15_signal_t::slot_type;
  using f16_signal_t = signal<void()>;
  using f16_slot_t = f16_signal_t::slot_type;
  using f17_signal_t = signal<void()>;
  using f17_slot_t = f17_signal_t::slot_type;
  using f18_signal_t = signal<void()>;
  using f18_slot_t = f18_signal_t::slot_type;
  using f19_signal_t = signal<void()>;
  using f19_slot_t = f19_signal_t::slot_type;
  using f20_signal_t = signal<void()>;
  using f20_slot_t = f20_signal_t::slot_type;
  using f21_signal_t = signal<void()>;
  using f21_slot_t = f21_signal_t::slot_type;
  using f22_signal_t = signal<void()>;
  using f22_slot_t = f22_signal_t::slot_type;
  using f23_signal_t = signal<void()>;
  using f23_slot_t = f23_signal_t::slot_type;
  using f24_signal_t = signal<void()>;
  using f24_slot_t = f24_signal_t::slot_type;
  using execute_signal_t = signal<void()>;
  using execute_slot_t = execute_signal_t::slot_type;
  using help_signal_t = signal<void()>;
  using help_slot_t = help_signal_t::slot_type;
  using menu_signal_t = signal<void()>;
  using menu_slot_t = menu_signal_t::slot_type;
  using select_signal_t = signal<void()>;
  using select_slot_t = select_signal_t::slot_type;
  using stop_signal_t = signal<void()>;
  using stop_slot_t = stop_signal_t::slot_type;
  using again_signal_t = signal<void()>;
  using again_slot_t = again_signal_t::slot_type;
  using undo_signal_t = signal<void()>;
  using undo_slot_t = undo_signal_t::slot_type;
  using cut_signal_t = signal<void()>;
  using cut_slot_t = cut_signal_t::slot_type;
  using copy_signal_t = signal<void()>;
  using copy_slot_t = copy_signal_t::slot_type;
  using paste_signal_t = signal<void()>;
  using paste_slot_t = paste_signal_t::slot_type;
  using find_signal_t = signal<void()>;
  using find_slot_t = find_signal_t::slot_type;
  using mute_signal_t = signal<void()>;
  using mute_slot_t = mute_signal_t::slot_type;
  using volumeup_signal_t = signal<void()>;
  using volumeup_slot_t = volumeup_signal_t::slot_type;
  using volumedown_signal_t = signal<void()>;
  using volumedown_slot_t = volumedown_signal_t::slot_type;
  using kp_comma_signal_t = signal<void()>;
  using kp_comma_slot_t = kp_comma_signal_t::slot_type;
  using kp_equalsas400_signal_t = signal<void()>;
  using kp_equalsas400_slot_t = kp_equalsas400_signal_t::slot_type;
  using alterase_signal_t = signal<void()>;
  using alterase_slot_t = alterase_signal_t::slot_type;
  using sysreq_signal_t = signal<void()>;
  using sysreq_slot_t = sysreq_signal_t::slot_type;
  using cancel_signal_t = signal<void()>;
  using cancel_slot_t = cancel_signal_t::slot_type;
  using clear_signal_t = signal<void()>;
  using clear_slot_t = clear_signal_t::slot_type;
  using prior_signal_t = signal<void()>;
  using prior_slot_t = prior_signal_t::slot_type;
  using return2_signal_t = signal<void()>;
  using return2_slot_t = return2_signal_t::slot_type;
  using separator_signal_t = signal<void()>;
  using separator_slot_t = separator_signal_t::slot_type;
  using out_signal_t = signal<void()>;
  using out_slot_t = out_signal_t::slot_type;
  using oper_signal_t = signal<void()>;
  using oper_slot_t = oper_signal_t::slot_type;
  using clearagain_signal_t = signal<void()>;
  using clearagain_slot_t = clearagain_signal_t::slot_type;
  using crsel_signal_t = signal<void()>;
  using crsel_slot_t = crsel_signal_t::slot_type;
  using exsel_signal_t = signal<void()>;
  using exsel_slot_t = exsel_signal_t::slot_type;
  using kp_00_signal_t = signal<void()>;
  using kp_00_slot_t = kp_00_signal_t::slot_type;
  using kp_000_signal_t = signal<void()>;
  using kp_000_slot_t = kp_000_signal_t::slot_type;
  using thousandsseparator_signal_t = signal<void()>;
  using thousandsseparator_slot_t = thousandsseparator_signal_t::slot_type;
  using decimalseparator_signal_t = signal<void()>;
  using decimalseparator_slot_t = decimalseparator_signal_t::slot_type;
  using currencyunit_signal_t = signal<void()>;
  using currencyunit_slot_t = currencyunit_signal_t::slot_type;
  using currencysubunit_signal_t = signal<void()>;
  using currencysubunit_slot_t = currencysubunit_signal_t::slot_type;
  using kp_leftparen_signal_t = signal<void()>;
  using kp_leftparen_slot_t = kp_leftparen_signal_t::slot_type;
  using kp_rightparen_signal_t = signal<void()>;
  using kp_rightparen_slot_t = kp_rightparen_signal_t::slot_type;
  using kp_leftbrace_signal_t = signal<void()>;
  using kp_leftbrace_slot_t = kp_leftbrace_signal_t::slot_type;
  using kp_rightbrace_signal_t = signal<void()>;
  using kp_rightbrace_slot_t = kp_rightbrace_signal_t::slot_type;
  using kp_tab_signal_t = signal<void()>;
  using kp_tab_slot_t = kp_tab_signal_t::slot_type;
  using kp_backspace_signal_t = signal<void()>;
  using kp_backspace_slot_t = kp_backspace_signal_t::slot_type;
  using kp_a_signal_t = signal<void()>;
  using kp_a_slot_t = kp_a_signal_t::slot_type;
  using kp_b_signal_t = signal<void()>;
  using kp_b_slot_t = kp_b_signal_t::slot_type;
  using kp_c_signal_t = signal<void()>;
  using kp_c_slot_t = kp_c_signal_t::slot_type;
  using kp_d_signal_t = signal<void()>;
  using kp_d_slot_t = kp_d_signal_t::slot_type;
  using kp_e_signal_t = signal<void()>;
  using kp_e_slot_t = kp_e_signal_t::slot_type;
  using kp_f_signal_t = signal<void()>;
  using kp_f_slot_t = kp_f_signal_t::slot_type;
  using kp_xor_signal_t = signal<void()>;
  using kp_xor_slot_t = kp_xor_signal_t::slot_type;
  using kp_power_signal_t = signal<void()>;
  using kp_power_slot_t = kp_power_signal_t::slot_type;
  using kp_percent_signal_t = signal<void()>;
  using kp_percent_slot_t = kp_percent_signal_t::slot_type;
  using kp_less_signal_t = signal<void()>;
  using kp_less_slot_t = kp_less_signal_t::slot_type;
  using kp_greater_signal_t = signal<void()>;
  using kp_greater_slot_t = kp_greater_signal_t::slot_type;
  using kp_ampersand_signal_t = signal<void()>;
  using kp_ampersand_slot_t = kp_ampersand_signal_t::slot_type;
  using kp_dblampersand_signal_t = signal<void()>;
  using kp_dblampersand_slot_t = kp_dblampersand_signal_t::slot_type;
  using kp_verticalbar_signal_t = signal<void()>;
  using kp_verticalbar_slot_t = kp_verticalbar_signal_t::slot_type;
  using kp_dblverticalbar_signal_t = signal<void()>;
  using kp_dblverticalbar_slot_t = kp_dblverticalbar_signal_t::slot_type;
  using kp_colon_signal_t = signal<void()>;
  using kp_colon_slot_t = kp_colon_signal_t::slot_type;
  using kp_hash_signal_t = signal<void()>;
  using kp_hash_slot_t = kp_hash_signal_t::slot_type;
  using kp_space_signal_t = signal<void()>;
  using kp_space_slot_t = kp_space_signal_t::slot_type;
  using kp_at_signal_t = signal<void()>;
  using kp_at_slot_t = kp_at_signal_t::slot_type;
  using kp_exclam_signal_t = signal<void()>;
  using kp_exclam_slot_t = kp_exclam_signal_t::slot_type;
  using kp_memstore_signal_t = signal<void()>;
  using kp_memstore_slot_t = kp_memstore_signal_t::slot_type;
  using kp_memrecall_signal_t = signal<void()>;
  using kp_memrecall_slot_t = kp_memrecall_signal_t::slot_type;
  using kp_memclear_signal_t = signal<void()>;
  using kp_memclear_slot_t = kp_memclear_signal_t::slot_type;
  using kp_memadd_signal_t = signal<void()>;
  using kp_memadd_slot_t = kp_memadd_signal_t::slot_type;
  using kp_memsubtract_signal_t = signal<void()>;
  using kp_memsubtract_slot_t = kp_memsubtract_signal_t::slot_type;
  using kp_memmultiply_signal_t = signal<void()>;
  using kp_memmultiply_slot_t = kp_memmultiply_signal_t::slot_type;
  using kp_memdivide_signal_t = signal<void()>;
  using kp_memdivide_slot_t = kp_memdivide_signal_t::slot_type;
  using kp_plusminus_signal_t = signal<void()>;
  using kp_plusminus_slot_t = kp_plusminus_signal_t::slot_type;
  using kp_clear_signal_t = signal<void()>;
  using kp_clear_slot_t = kp_clear_signal_t::slot_type;
  using kp_clearentry_signal_t = signal<void()>;
  using kp_clearentry_slot_t = kp_clearentry_signal_t::slot_type;
  using kp_binary_signal_t = signal<void()>;
  using kp_binary_slot_t = kp_binary_signal_t::slot_type;
  using kp_octal_signal_t = signal<void()>;
  using kp_octal_slot_t = kp_octal_signal_t::slot_type;
  using kp_decimal_signal_t = signal<void()>;
  using kp_decimal_slot_t = kp_decimal_signal_t::slot_type;
  using kp_hexadecimal_signal_t = signal<void()>;
  using kp_hexadecimal_slot_t = kp_hexadecimal_signal_t::slot_type;
  using lctrl_signal_t = signal<void()>;
  using lctrl_slot_t = lctrl_signal_t::slot_type;
  using lshift_signal_t = signal<void()>;
  using lshift_slot_t = lshift_signal_t::slot_type;
  using lalt_signal_t = signal<void()>;
  using lalt_slot_t = lalt_signal_t::slot_type;
  using lgui_signal_t = signal<void()>;
  using lgui_slot_t = lgui_signal_t::slot_type;
  using rctrl_signal_t = signal<void()>;
  using rctrl_slot_t = rctrl_signal_t::slot_type;
  using rshift_signal_t = signal<void()>;
  using rshift_slot_t = rshift_signal_t::slot_type;
  using ralt_signal_t = signal<void()>;
  using ralt_slot_t = ralt_signal_t::slot_type;
  using rgui_signal_t = signal<void()>;
  using rgui_slot_t = rgui_signal_t::slot_type;
  using mode_signal_t = signal<void()>;
  using mode_slot_t = mode_signal_t::slot_type;
  using audionext_signal_t = signal<void()>;
  using audionext_slot_t = audionext_signal_t::slot_type;
  using audioprev_signal_t = signal<void()>;
  using audioprev_slot_t = audioprev_signal_t::slot_type;
  using audiostop_signal_t = signal<void()>;
  using audiostop_slot_t = audiostop_signal_t::slot_type;
  using audioplay_signal_t = signal<void()>;
  using audioplay_slot_t = audioplay_signal_t::slot_type;
  using audiomute_signal_t = signal<void()>;
  using audiomute_slot_t = audiomute_signal_t::slot_type;
  using mediaselect_signal_t = signal<void()>;
  using mediaselect_slot_t = mediaselect_signal_t::slot_type;
  using www_signal_t = signal<void()>;
  using www_slot_t = www_signal_t::slot_type;
  using mail_signal_t = signal<void()>;
  using mail_slot_t = mail_signal_t::slot_type;
  using calculator_signal_t = signal<void()>;
  using calculator_slot_t = calculator_signal_t::slot_type;
  using computer_signal_t = signal<void()>;
  using computer_slot_t = computer_signal_t::slot_type;
  using ac_search_signal_t = signal<void()>;
  using ac_search_slot_t = ac_search_signal_t::slot_type;
  using ac_home_signal_t = signal<void()>;
  using ac_home_slot_t = ac_home_signal_t::slot_type;
  using ac_back_signal_t = signal<void()>;
  using ac_back_slot_t = ac_back_signal_t::slot_type;
  using ac_forward_signal_t = signal<void()>;
  using ac_forward_slot_t = ac_forward_signal_t::slot_type;
  using ac_stop_signal_t = signal<void()>;
  using ac_stop_slot_t = ac_stop_signal_t::slot_type;
  using ac_refresh_signal_t = signal<void()>;
  using ac_refresh_slot_t = ac_refresh_signal_t::slot_type;
  using ac_bookmarks_signal_t = signal<void()>;
  using ac_bookmarks_slot_t = ac_bookmarks_signal_t::slot_type;
  using brightnessdown_signal_t = signal<void()>;
  using brightnessdown_slot_t = brightnessdown_signal_t::slot_type;
  using brightnessup_signal_t = signal<void()>;
  using brightnessup_slot_t = brightnessup_signal_t::slot_type;
  using displayswitch_signal_t = signal<void()>;
  using displayswitch_slot_t = displayswitch_signal_t::slot_type;
  using kbdillumtoggle_signal_t = signal<void()>;
  using kbdillumtoggle_slot_t = kbdillumtoggle_signal_t::slot_type;
  using kbdillumdown_signal_t = signal<void()>;
  using kbdillumdown_slot_t = kbdillumdown_signal_t::slot_type;
  using kbdillumup_signal_t = signal<void()>;
  using kbdillumup_slot_t = kbdillumup_signal_t::slot_type;
  using eject_signal_t = signal<void()>;
  using eject_slot_t = eject_signal_t::slot_type;
  using sleep_signal_t = signal<void()>;
  using sleep_slot_t = sleep_signal_t::slot_type;

  void unknown() const;
  void backspace() const;
  void tab() const;
  void returnkey() const;
  void escape() const;
  void space() const;
  void exclaim() const;
  void quotedbl() const;
  void hash() const;
  void dollar() const;
  void percent() const;
  void ampersand() const;
  void quote() const;
  void leftparen() const;
  void rightparen() const;
  void asterisk() const;
  void plus() const;
  void comma() const;
  void minus() const;
  void period() const;
  void slash() const;
  void zero() const;
  void one() const;
  void two() const;
  void three() const;
  void four() const;
  void five() const;
  void six() const;
  void seven() const;
  void eight() const;
  void nine() const;
  void colon() const;
  void semicolon() const;
  void less() const;
  void equals() const;
  void greater() const;
  void question() const;
  void at() const;
  void leftbracket() const;
  void backslash() const;
  void rightbracket() const;
  void caret() const;
  void underscore() const;
  void backquote() const;
  void a() const;
  void b() const;
  void c() const;
  void d() const;
  void e() const;
  void f() const;
  void g() const;
  void h() const;
  void i() const;
  void j() const;
  void k() const;
  void l() const;
  void m() const;
  void n() const;
  void o() const;
  void p() const;
  void q() const;
  void r() const;
  void s() const;
  void t() const;
  void u() const;
  void v() const;
  void w() const;
  void x() const;
  void y() const;
  void z() const;
  void deletekey() const;
  void capslock() const;
  void f1() const;
  void f2() const;
  void f3() const;
  void f4() const;
  void f5() const;
  void f6() const;
  void f7() const;
  void f8() const;
  void f9() const;
  void f10() const;
  void f11() const;
  void f12() const;
  void printscreen() const;
  void scrolllock() const;
  void pause() const;
  void insert() const;
  void home() const;
  void pageup() const;
  void end() const;
  void pagedown() const;
  void right() const;
  void left() const;
  void down() const;
  void up() const;
  void numlockclear() const;
  void kp_divide() const;
  void kp_multiply() const;
  void kp_minus() const;
  void kp_plus() const;
  void kp_enter() const;
  void kp_1() const;
  void kp_2() const;
  void kp_3() const;
  void kp_4() const;
  void kp_5() const;
  void kp_6() const;
  void kp_7() const;
  void kp_8() const;
  void kp_9() const;
  void kp_0() const;
  void kp_period() const;
  void application() const;
  void power() const;
  void kp_equals() const;
  void f13() const;
  void f14() const;
  void f15() const;
  void f16() const;
  void f17() const;
  void f18() const;
  void f19() const;
  void f20() const;
  void f21() const;
  void f22() const;
  void f23() const;
  void f24() const;
  void execute() const;
  void help() const;
  void menu() const;
  void select() const;
  void stop() const;
  void again() const;
  void undo() const;
  void cut() const;
  void copy() const;
  void paste() const;
  void find() const;
  void mute() const;
  void volumeup() const;
  void volumedown() const;
  void kp_comma() const;
  void kp_equalsas400() const;
  void alterase() const;
  void sysreq() const;
  void cancel() const;
  void clear() const;
  void prior() const;
  void return2() const;
  void separator() const;
  void out() const;
  void oper() const;
  void clearagain() const;
  void crsel() const;
  void exsel() const;
  void kp_00() const;
  void kp_000() const;
  void thousandsseparator() const;
  void decimalseparator() const;
  void currencyunit() const;
  void currencysubunit() const;
  void kp_leftparen() const;
  void kp_rightparen() const;
  void kp_leftbrace() const;
  void kp_rightbrace() const;
  void kp_tab() const;
  void kp_backspace() const;
  void kp_a() const;
  void kp_b() const;
  void kp_c() const;
  void kp_d() const;
  void kp_e() const;
  void kp_f() const;
  void kp_xor() const;
  void kp_power() const;
  void kp_percent() const;
  void kp_less() const;
  void kp_greater() const;
  void kp_ampersand() const;
  void kp_dblampersand() const;
  void kp_verticalbar() const;
  void kp_dblverticalbar() const;
  void kp_colon() const;
  void kp_hash() const;
  void kp_space() const;
  void kp_at() const;
  void kp_exclam() const;
  void kp_memstore() const;
  void kp_memrecall() const;
  void kp_memclear() const;
  void kp_memadd() const;
  void kp_memsubtract() const;
  void kp_memmultiply() const;
  void kp_memdivide() const;
  void kp_plusminus() const;
  void kp_clear() const;
  void kp_clearentry() const;
  void kp_binary() const;
  void kp_octal() const;
  void kp_decimal() const;
  void kp_hexadecimal() const;
  void lctrl() const;
  void lshift() const;
  void lalt() const;
  void lgui() const;
  void rctrl() const;
  void rshift() const;
  void ralt() const;
  void rgui() const;
  void mode() const;
  void audionext() const;
  void audioprev() const;
  void audiostop() const;
  void audioplay() const;
  void audiomute() const;
  void mediaselect() const;
  void www() const;
  void mail() const;
  void calculator() const;
  void computer() const;
  void ac_search() const;
  void ac_home() const;
  void ac_back() const;
  void ac_forward() const;
  void ac_stop() const;
  void ac_refresh() const;
  void ac_bookmarks() const;
  void brightnessdown() const;
  void brightnessup() const;
  void displayswitch() const;
  void kbdillumtoggle() const;
  void kbdillumdown() const;
  void kbdillumup() const;
  void eject() const;
  void sleep() const;

  connection on_unknown(unknown_slot_t const& op);
  connection on_backspace(backspace_slot_t const& op);
  connection on_tab(tab_slot_t const& op);
  connection on_return(returnkey_slot_t const& op);
  connection on_escape(escape_slot_t const& op);
  connection on_space(space_slot_t const& op);
  connection on_exclaim(exclaim_slot_t const& op);
  connection on_quotedbl(quotedbl_slot_t const& op);
  connection on_hash(hash_slot_t const& op);
  connection on_dollar(dollar_slot_t const& op);
  connection on_percent(percent_slot_t const& op);
  connection on_ampersand(ampersand_slot_t const& op);
  connection on_quote(quote_slot_t const& op);
  connection on_leftparen(leftparen_slot_t const& op);
  connection on_rightparen(rightparen_slot_t const& op);
  connection on_asterisk(asterisk_slot_t const& op);
  connection on_plus(plus_slot_t const& op);
  connection on_comma(comma_slot_t const& op);
  connection on_minus(minus_slot_t const& op);
  connection on_period(period_slot_t const& op);
  connection on_slash(slash_slot_t const& op);
  connection on_zero(zero_slot_t const& op);
  connection on_one(one_slot_t const& op);
  connection on_two(two_slot_t const& op);
  connection on_three(three_slot_t const& op);
  connection on_four(four_slot_t const& op);
  connection on_five(five_slot_t const& op);
  connection on_six(six_slot_t const& op);
  connection on_seven(seven_slot_t const& op);
  connection on_eight(eight_slot_t const& op);
  connection on_nine(nine_slot_t const& op);
  connection on_colon(colon_slot_t const& op);
  connection on_semicolon(semicolon_slot_t const& op);
  connection on_less(less_slot_t const& op);
  connection on_equals(equals_slot_t const& op);
  connection on_greater(greater_slot_t const& op);
  connection on_question(question_slot_t const& op);
  connection on_at(at_slot_t const& op);
  connection on_leftbracket(leftbracket_slot_t const& op);
  connection on_backslash(backslash_slot_t const& op);
  connection on_rightbracket(rightbracket_slot_t const& op);
  connection on_caret(caret_slot_t const& op);
  connection on_underscore(underscore_slot_t const& op);
  connection on_backquote(backquote_slot_t const& op);
  connection on_a(a_slot_t const& op);
  connection on_b(b_slot_t const& op);
  connection on_c(c_slot_t const& op);
  connection on_d(d_slot_t const& op);
  connection on_e(e_slot_t const& op);
  connection on_f(f_slot_t const& op);
  connection on_g(g_slot_t const& op);
  connection on_h(h_slot_t const& op);
  connection on_i(i_slot_t const& op);
  connection on_j(j_slot_t const& op);
  connection on_k(k_slot_t const& op);
  connection on_l(l_slot_t const& op);
  connection on_m(m_slot_t const& op);
  connection on_n(n_slot_t const& op);
  connection on_o(o_slot_t const& op);
  connection on_p(p_slot_t const& op);
  connection on_q(q_slot_t const& op);
  connection on_r(r_slot_t const& op);
  connection on_s(s_slot_t const& op);
  connection on_t(t_slot_t const& op);
  connection on_u(u_slot_t const& op);
  connection on_v(v_slot_t const& op);
  connection on_w(w_slot_t const& op);
  connection on_x(x_slot_t const& op);
  connection on_y(y_slot_t const& op);
  connection on_z(z_slot_t const& op);
  connection on_deletekey(deletekey_slot_t const& op);
  connection on_capslock(capslock_slot_t const& op);
  connection on_f1(f1_slot_t const& op);
  connection on_f2(f2_slot_t const& op);
  connection on_f3(f3_slot_t const& op);
  connection on_f4(f4_slot_t const& op);
  connection on_f5(f5_slot_t const& op);
  connection on_f6(f6_slot_t const& op);
  connection on_f7(f7_slot_t const& op);
  connection on_f8(f8_slot_t const& op);
  connection on_f9(f9_slot_t const& op);
  connection on_f10(f10_slot_t const& op);
  connection on_f11(f11_slot_t const& op);
  connection on_f12(f12_slot_t const& op);
  connection on_printscreen(printscreen_slot_t const& op);
  connection on_scrolllock(scrolllock_slot_t const& op);
  connection on_pause(pause_slot_t const& op);
  connection on_insert(insert_slot_t const& op);
  connection on_home(home_slot_t const& op);
  connection on_pageup(pageup_slot_t const& op);
  connection on_end(end_slot_t const& op);
  connection on_pagedown(pagedown_slot_t const& op);
  connection on_right(right_slot_t const& op);
  connection on_left(left_slot_t const& op);
  connection on_down(down_slot_t const& op);
  connection on_up(up_slot_t const& op);
  connection on_numlockclear(numlockclear_slot_t const& op);
  connection on_kp_divide(kp_divide_slot_t const& op);
  connection on_kp_multiply(kp_multiply_slot_t const& op);
  connection on_kp_minus(kp_minus_slot_t const& op);
  connection on_kp_plus(kp_plus_slot_t const& op);
  connection on_kp_enter(kp_enter_slot_t const& op);
  connection on_kp_1(kp_1_slot_t const& op);
  connection on_kp_2(kp_2_slot_t const& op);
  connection on_kp_3(kp_3_slot_t const& op);
  connection on_kp_4(kp_4_slot_t const& op);
  connection on_kp_5(kp_5_slot_t const& op);
  connection on_kp_6(kp_6_slot_t const& op);
  connection on_kp_7(kp_7_slot_t const& op);
  connection on_kp_8(kp_8_slot_t const& op);
  connection on_kp_9(kp_9_slot_t const& op);
  connection on_kp_0(kp_0_slot_t const& op);
  connection on_kp_period(kp_period_slot_t const& op);
  connection on_application(application_slot_t const& op);
  connection on_power(power_slot_t const& op);
  connection on_kp_equals(kp_equals_slot_t const& op);
  connection on_f13(f13_slot_t const& op);
  connection on_f14(f14_slot_t const& op);
  connection on_f15(f15_slot_t const& op);
  connection on_f16(f16_slot_t const& op);
  connection on_f17(f17_slot_t const& op);
  connection on_f18(f18_slot_t const& op);
  connection on_f19(f19_slot_t const& op);
  connection on_f20(f20_slot_t const& op);
  connection on_f21(f21_slot_t const& op);
  connection on_f22(f22_slot_t const& op);
  connection on_f23(f23_slot_t const& op);
  connection on_f24(f24_slot_t const& op);
  connection on_execute(execute_slot_t const& op);
  connection on_help(help_slot_t const& op);
  connection on_menu(menu_slot_t const& op);
  connection on_select(select_slot_t const& op);
  connection on_stop(stop_slot_t const& op);
  connection on_again(again_slot_t const& op);
  connection on_undo(undo_slot_t const& op);
  connection on_cut(cut_slot_t const& op);
  connection on_copy(copy_slot_t const& op);
  connection on_paste(paste_slot_t const& op);
  connection on_find(find_slot_t const& op);
  connection on_mute(mute_slot_t const& op);
  connection on_volumeup(volumeup_slot_t const& op);
  connection on_volumedown(volumedown_slot_t const& op);
  connection on_kp_comma(kp_comma_slot_t const& op);
  connection on_kp_equalsas400(kp_equalsas400_slot_t const& op);
  connection on_alterase(alterase_slot_t const& op);
  connection on_sysreq(sysreq_slot_t const& op);
  connection on_cancel(cancel_slot_t const& op);
  connection on_clear(clear_slot_t const& op);
  connection on_prior(prior_slot_t const& op);
  connection on_return2(return2_slot_t const& op);
  connection on_separator(separator_slot_t const& op);
  connection on_out(out_slot_t const& op);
  connection on_oper(oper_slot_t const& op);
  connection on_clearagain(clearagain_slot_t const& op);
  connection on_crsel(crsel_slot_t const& op);
  connection on_exsel(exsel_slot_t const& op);
  connection on_kp_00(kp_00_slot_t const& op);
  connection on_kp_000(kp_000_slot_t const& op);
  connection on_thousandsseparator(thousandsseparator_slot_t const& op);
  connection on_decimalseparator(decimalseparator_slot_t const& op);
  connection on_currencyunit(currencyunit_slot_t const& op);
  connection on_currencysubunit(currencysubunit_slot_t const& op);
  connection on_kp_leftparen(kp_leftparen_slot_t const& op);
  connection on_kp_rightparen(kp_rightparen_slot_t const& op);
  connection on_kp_leftbrace(kp_leftbrace_slot_t const& op);
  connection on_kp_rightbrace(kp_rightbrace_slot_t const& op);
  connection on_kp_tab(kp_tab_slot_t const& op);
  connection on_kp_backspace(kp_backspace_slot_t const& op);
  connection on_kp_a(kp_a_slot_t const& op);
  connection on_kp_b(kp_b_slot_t const& op);
  connection on_kp_c(kp_c_slot_t const& op);
  connection on_kp_d(kp_d_slot_t const& op);
  connection on_kp_e(kp_e_slot_t const& op);
  connection on_kp_f(kp_f_slot_t const& op);
  connection on_kp_xor(kp_xor_slot_t const& op);
  connection on_kp_power(kp_power_slot_t const& op);
  connection on_kp_percent(kp_percent_slot_t const& op);
  connection on_kp_less(kp_less_slot_t const& op);
  connection on_kp_greater(kp_greater_slot_t const& op);
  connection on_kp_ampersand(kp_ampersand_slot_t const& op);
  connection on_kp_dblampersand(kp_dblampersand_slot_t const& op);
  connection on_kp_verticalbar(kp_verticalbar_slot_t const& op);
  connection on_kp_dblverticalbar(kp_dblverticalbar_slot_t const& op);
  connection on_kp_colon(kp_colon_slot_t const& op);
  connection on_kp_hash(kp_hash_slot_t const& op);
  connection on_kp_space(kp_space_slot_t const& op);
  connection on_kp_at(kp_at_slot_t const& op);
  connection on_kp_exclam(kp_exclam_slot_t const& op);
  connection on_kp_memstore(kp_memstore_slot_t const& op);
  connection on_kp_memrecall(kp_memrecall_slot_t const& op);
  connection on_kp_memclear(kp_memclear_slot_t const& op);
  connection on_kp_memadd(kp_memadd_slot_t const& op);
  connection on_kp_memsubtract(kp_memsubtract_slot_t const& op);
  connection on_kp_memmultiply(kp_memmultiply_slot_t const& op);
  connection on_kp_memdivide(kp_memdivide_slot_t const& op);
  connection on_kp_plusminus(kp_plusminus_slot_t const& op);
  connection on_kp_clear(kp_clear_slot_t const& op);
  connection on_kp_clearentry(kp_clearentry_slot_t const& op);
  connection on_kp_binary(kp_binary_slot_t const& op);
  connection on_kp_octal(kp_octal_slot_t const& op);
  connection on_kp_decimal(kp_decimal_slot_t const& op);
  connection on_kp_hexadecimal(kp_hexadecimal_slot_t const& op);
  connection on_lctrl(lctrl_slot_t const& op);
  connection on_lshift(lshift_slot_t const& op);
  connection on_lalt(lalt_slot_t const& op);
  connection on_lgui(lgui_slot_t const& op);
  connection on_rctrl(rctrl_slot_t const& op);
  connection on_rshift(rshift_slot_t const& op);
  connection on_ralt(ralt_slot_t const& op);
  connection on_rgui(rgui_slot_t const& op);
  connection on_mode(mode_slot_t const& op);
  connection on_audionext(audionext_slot_t const& op);
  connection on_audioprev(audioprev_slot_t const& op);
  connection on_audiostop(audiostop_slot_t const& op);
  connection on_audioplay(audioplay_slot_t const& op);
  connection on_audiomute(audiomute_slot_t const& op);
  connection on_mediaselect(mediaselect_slot_t const& op);
  connection on_www(www_slot_t const& op);
  connection on_mail(mail_slot_t const& op);
  connection on_calculator(calculator_slot_t const& op);
  connection on_computer(computer_slot_t const& op);
  connection on_ac_search(ac_search_slot_t const& op);
  connection on_ac_home(ac_home_slot_t const& op);
  connection on_ac_back(ac_back_slot_t const& op);
  connection on_ac_forward(ac_forward_slot_t const& op);
  connection on_ac_stop(ac_stop_slot_t const& op);
  connection on_ac_refresh(ac_refresh_slot_t const& op);
  connection on_ac_bookmarks(ac_bookmarks_slot_t const& op);
  connection on_brightnessdown(brightnessdown_slot_t const& op);
  connection on_brightnessup(brightnessup_slot_t const& op);
  connection on_displayswitch(displayswitch_slot_t const& op);
  connection on_kbdillumtoggle(kbdillumtoggle_slot_t const& op);
  connection on_kbdillumdown(kbdillumdown_slot_t const& op);
  connection on_kbdillumup(kbdillumup_slot_t const& op);
  connection on_eject(eject_slot_t const& op);
  connection on_sleep(sleep_slot_t const& op);

public:
  repeat_keydown_event_dispatch repeat;
  nonrepeat_keydown_event_dispatch nonrepeat;

private:
  unknown_signal_t unknown_signal;
  backspace_signal_t backspace_signal;
  tab_signal_t tab_signal;
  returnkey_signal_t returnkey_signal;
  escape_signal_t escape_signal;
  space_signal_t space_signal;
  exclaim_signal_t exclaim_signal;
  quotedbl_signal_t quotedbl_signal;
  hash_signal_t hash_signal;
  dollar_signal_t dollar_signal;
  percent_signal_t percent_signal;
  ampersand_signal_t ampersand_signal;
  quote_signal_t quote_signal;
  leftparen_signal_t leftparen_signal;
  rightparen_signal_t rightparen_signal;
  asterisk_signal_t asterisk_signal;
  plus_signal_t plus_signal;
  comma_signal_t comma_signal;
  minus_signal_t minus_signal;
  period_signal_t period_signal;
  slash_signal_t slash_signal;
  zero_signal_t zero_signal;
  one_signal_t one_signal;
  two_signal_t two_signal;
  three_signal_t three_signal;
  four_signal_t four_signal;
  five_signal_t five_signal;
  six_signal_t six_signal;
  seven_signal_t seven_signal;
  eight_signal_t eight_signal;
  nine_signal_t nine_signal;
  colon_signal_t colon_signal;
  semicolon_signal_t semicolon_signal;
  less_signal_t less_signal;
  equals_signal_t equals_signal;
  greater_signal_t greater_signal;
  question_signal_t question_signal;
  at_signal_t at_signal;
  leftbracket_signal_t leftbracket_signal;
  backslash_signal_t backslash_signal;
  rightbracket_signal_t rightbracket_signal;
  caret_signal_t caret_signal;
  underscore_signal_t underscore_signal;
  backquote_signal_t backquote_signal;
  a_signal_t a_signal;
  b_signal_t b_signal;
  c_signal_t c_signal;
  d_signal_t d_signal;
  e_signal_t e_signal;
  f_signal_t f_signal;
  g_signal_t g_signal;
  h_signal_t h_signal;
  i_signal_t i_signal;
  j_signal_t j_signal;
  k_signal_t k_signal;
  l_signal_t l_signal;
  m_signal_t m_signal;
  n_signal_t n_signal;
  o_signal_t o_signal;
  p_signal_t p_signal;
  q_signal_t q_signal;
  r_signal_t r_signal;
  s_signal_t s_signal;
  t_signal_t t_signal;
  u_signal_t u_signal;
  v_signal_t v_signal;
  w_signal_t w_signal;
  x_signal_t x_signal;
  y_signal_t y_signal;
  z_signal_t z_signal;
  deletekey_signal_t deletekey_signal;
  capslock_signal_t capslock_signal;
  f1_signal_t f1_signal;
  f2_signal_t f2_signal;
  f3_signal_t f3_signal;
  f4_signal_t f4_signal;
  f5_signal_t f5_signal;
  f6_signal_t f6_signal;
  f7_signal_t f7_signal;
  f8_signal_t f8_signal;
  f9_signal_t f9_signal;
  f10_signal_t f10_signal;
  f11_signal_t f11_signal;
  f12_signal_t f12_signal;
  printscreen_signal_t printscreen_signal;
  scrolllock_signal_t scrolllock_signal;
  pause_signal_t pause_signal;
  insert_signal_t insert_signal;
  home_signal_t home_signal;
  pageup_signal_t pageup_signal;
  end_signal_t end_signal;
  pagedown_signal_t pagedown_signal;
  right_signal_t right_signal;
  left_signal_t left_signal;
  down_signal_t down_signal;
  up_signal_t up_signal;
  numlockclear_signal_t numlockclear_signal;
  kp_divide_signal_t kp_divide_signal;
  kp_multiply_signal_t kp_multiply_signal;
  kp_minus_signal_t kp_minus_signal;
  kp_plus_signal_t kp_plus_signal;
  kp_enter_signal_t kp_enter_signal;
  kp_1_signal_t kp_1_signal;
  kp_2_signal_t kp_2_signal;
  kp_3_signal_t kp_3_signal;
  kp_4_signal_t kp_4_signal;
  kp_5_signal_t kp_5_signal;
  kp_6_signal_t kp_6_signal;
  kp_7_signal_t kp_7_signal;
  kp_8_signal_t kp_8_signal;
  kp_9_signal_t kp_9_signal;
  kp_0_signal_t kp_0_signal;
  kp_period_signal_t kp_period_signal;
  application_signal_t application_signal;
  power_signal_t power_signal;
  kp_equals_signal_t kp_equals_signal;
  f13_signal_t f13_signal;
  f14_signal_t f14_signal;
  f15_signal_t f15_signal;
  f16_signal_t f16_signal;
  f17_signal_t f17_signal;
  f18_signal_t f18_signal;
  f19_signal_t f19_signal;
  f20_signal_t f20_signal;
  f21_signal_t f21_signal;
  f22_signal_t f22_signal;
  f23_signal_t f23_signal;
  f24_signal_t f24_signal;
  execute_signal_t execute_signal;
  help_signal_t help_signal;
  menu_signal_t menu_signal;
  select_signal_t select_signal;
  stop_signal_t stop_signal;
  again_signal_t again_signal;
  undo_signal_t undo_signal;
  cut_signal_t cut_signal;
  copy_signal_t copy_signal;
  paste_signal_t paste_signal;
  find_signal_t find_signal;
  mute_signal_t mute_signal;
  volumeup_signal_t volumeup_signal;
  volumedown_signal_t volumedown_signal;
  kp_comma_signal_t kp_comma_signal;
  kp_equalsas400_signal_t kp_equalsas400_signal;
  alterase_signal_t alterase_signal;
  sysreq_signal_t sysreq_signal;
  cancel_signal_t cancel_signal;
  clear_signal_t clear_signal;
  prior_signal_t prior_signal;
  return2_signal_t return2_signal;
  separator_signal_t separator_signal;
  out_signal_t out_signal;
  oper_signal_t oper_signal;
  clearagain_signal_t clearagain_signal;
  crsel_signal_t crsel_signal;
  exsel_signal_t exsel_signal;
  kp_00_signal_t kp_00_signal;
  kp_000_signal_t kp_000_signal;
  thousandsseparator_signal_t thousandsseparator_signal;
  decimalseparator_signal_t decimalseparator_signal;
  currencyunit_signal_t currencyunit_signal;
  currencysubunit_signal_t currencysubunit_signal;
  kp_leftparen_signal_t kp_leftparen_signal;
  kp_rightparen_signal_t kp_rightparen_signal;
  kp_leftbrace_signal_t kp_leftbrace_signal;
  kp_rightbrace_signal_t kp_rightbrace_signal;
  kp_tab_signal_t kp_tab_signal;
  kp_backspace_signal_t kp_backspace_signal;
  kp_a_signal_t kp_a_signal;
  kp_b_signal_t kp_b_signal;
  kp_c_signal_t kp_c_signal;
  kp_d_signal_t kp_d_signal;
  kp_e_signal_t kp_e_signal;
  kp_f_signal_t kp_f_signal;
  kp_xor_signal_t kp_xor_signal;
  kp_power_signal_t kp_power_signal;
  kp_percent_signal_t kp_percent_signal;
  kp_less_signal_t kp_less_signal;
  kp_greater_signal_t kp_greater_signal;
  kp_ampersand_signal_t kp_ampersand_signal;
  kp_dblampersand_signal_t kp_dblampersand_signal;
  kp_verticalbar_signal_t kp_verticalbar_signal;
  kp_dblverticalbar_signal_t kp_dblverticalbar_signal;
  kp_colon_signal_t kp_colon_signal;
  kp_hash_signal_t kp_hash_signal;
  kp_space_signal_t kp_space_signal;
  kp_at_signal_t kp_at_signal;
  kp_exclam_signal_t kp_exclam_signal;
  kp_memstore_signal_t kp_memstore_signal;
  kp_memrecall_signal_t kp_memrecall_signal;
  kp_memclear_signal_t kp_memclear_signal;
  kp_memadd_signal_t kp_memadd_signal;
  kp_memsubtract_signal_t kp_memsubtract_signal;
  kp_memmultiply_signal_t kp_memmultiply_signal;
  kp_memdivide_signal_t kp_memdivide_signal;
  kp_plusminus_signal_t kp_plusminus_signal;
  kp_clear_signal_t kp_clear_signal;
  kp_clearentry_signal_t kp_clearentry_signal;
  kp_binary_signal_t kp_binary_signal;
  kp_octal_signal_t kp_octal_signal;
  kp_decimal_signal_t kp_decimal_signal;
  kp_hexadecimal_signal_t kp_hexadecimal_signal;
  lctrl_signal_t lctrl_signal;
  lshift_signal_t lshift_signal;
  lalt_signal_t lalt_signal;
  lgui_signal_t lgui_signal;
  rctrl_signal_t rctrl_signal;
  rshift_signal_t rshift_signal;
  ralt_signal_t ralt_signal;
  rgui_signal_t rgui_signal;
  mode_signal_t mode_signal;
  audionext_signal_t audionext_signal;
  audioprev_signal_t audioprev_signal;
  audiostop_signal_t audiostop_signal;
  audioplay_signal_t audioplay_signal;
  audiomute_signal_t audiomute_signal;
  mediaselect_signal_t mediaselect_signal;
  www_signal_t www_signal;
  mail_signal_t mail_signal;
  calculator_signal_t calculator_signal;
  computer_signal_t computer_signal;
  ac_search_signal_t ac_search_signal;
  ac_home_signal_t ac_home_signal;
  ac_back_signal_t ac_back_signal;
  ac_forward_signal_t ac_forward_signal;
  ac_stop_signal_t ac_stop_signal;
  ac_refresh_signal_t ac_refresh_signal;
  ac_bookmarks_signal_t ac_bookmarks_signal;
  brightnessdown_signal_t brightnessdown_signal;
  brightnessup_signal_t brightnessup_signal;
  displayswitch_signal_t displayswitch_signal;
  kbdillumtoggle_signal_t kbdillumtoggle_signal;
  kbdillumdown_signal_t kbdillumdown_signal;
  kbdillumup_signal_t kbdillumup_signal;
  eject_signal_t eject_signal;
  sleep_signal_t sleep_signal;
};
}

#endif
